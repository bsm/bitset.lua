package.path  = './spec/?.lua;./lib/?.lua;;' .. package.path
require 'spec_helper'

context('bitset', function()
  local M = require 'bitset'

  before(function()
    a = M:new()
    b = M:new()
  end)

  it('should get/set/clear bits', function()
    assert_tables(a.nums, {})
    a:set(0)
    assert_tables(a.nums, {1})
    a:set(1)
    assert_tables(a.nums, {3})
    a:set(2)
    assert_tables(a.nums, {7})
    a:clear(2)
    assert_tables(a.nums, {3})
    a:clear(200)
    assert_tables(a.nums, {3})
    a:set(30)
    assert_tables(a.nums, {1073741827})
    a:set(31)
    assert_tables(a.nums, {-1073741821})
    a:set(32)
    assert_tables(a.nums, {-1073741821, 1})
    a:set(33)
    assert_tables(a.nums, {-1073741821, 3})
    a:set(150)
    assert_tables(a.nums, {-1073741821, 3, 0, 0, 4194304})
    a:set(990)

    assert_true(a:get(0))
    assert_true(a:get(1))
    assert_false(a:get(2))
    assert_false(a:get(29))
    assert_true(a:get(30))
    assert_true(a:get(31))
    assert_true(a:get(32))
    assert_true(a:get(33))
    assert_false(a:get(34))
    assert_false(a:get(65))
    assert_false(a:get(149))
    assert_true(a:get(150))
    assert_false(a:get(151))
    assert_false(a:get(989))
    assert_true(a:get(990))
    assert_false(a:get(991))
  end)

  it('should multi get/set/clear', function()
    a:set(17, 63, 67):set(84, 92)
    assert_tables(a:get(1, 17, 32, 63, 64), {false, true, false, true, false})
    a:clear(1, 12):clear(63, 67)
    assert_tables(a:get(1, 17, 32, 63, 64), {false, true, false, false, false})
  end)

  it('should read offsets', function()
    a:set(84, 63, 67, 92, 17)
    assert_tables(a:offsets(), {17, 63, 67, 84, 92})
  end)

  it('should count set bits', function()
    assert_tables(a:count(), 0)
    a:set(0)
    assert_tables(a:count(), 1)
    a:set(1)
    assert_tables(a:count(), 2)
    a:set(31)
    assert_tables(a:count(), 3)
    a:set(999)
    assert_tables(a:count(), 4)
    a:set(84, 63, 67, 92)
    assert_tables(a:count(), 8)
    a:set(63, 64, 65, 66, 67)
    assert_tables(a:count(), 11)
  end)

  it('should create unions', function()
    a:set(1, 3, 5)
    b:set(6, 4, 2)
    assert_tables(M.union(a, b):offsets(), {1,2,3,4,5,6})
    assert_tables(M.union(a, M:new()):offsets(), {1,3,5})
    assert_tables(M.union(M:new(), b):offsets(), {2,4,6})

    c = M:new()
    d = M:new()
    c:set(17, 33, 63, 67, 84, 92)
    d:set(1, 6, 33, 61, 63, 999)
    assert_tables(c:union(a, d):offsets(), {1,3,5,6,17,33,61,63,67,84,92,999})
  end)

  it('should create intersections', function()
    a:set(1, 3, 5)
    b:set(6, 4, 2)
    assert_tables(M.inter(a, b):offsets(), {})
    assert_tables(M.inter(a, M:new()):offsets(), {})
    assert_tables(M.inter(M:new(), b):offsets(), {})

    c = M:new()
    d = M:new()
    c:set(33, 63, 67, 84, 92, 999)
    d:set(1, 6, 33, 61, 63)
    assert_tables(c:inter(d):offsets(), {33,63})
  end)

  it('should create diffs', function()
    a:set(1, 3, 5)
    b:set(6, 4, 2)
    assert_tables(M.diff(a, b):offsets(), {1,3,5})
    assert_tables(M.diff(a, M:new()):offsets(), {1,3,5})
    assert_tables(M.diff(M:new(), b):offsets(), {})

    c = M:new()
    d = M:new()
    e = M:new()
    c:set(7, 33, 63, 67, 84, 92, 129)
    d:set(1, 6, 33, 61, 63, 999)
    assert_tables(c:diff(d):offsets(), {7,67,84,92,129})
    assert_tables(d:diff(e):offsets(), {1,6,33,61,63,999})
  end)
end)
